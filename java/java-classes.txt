// classes and objects

public class Main {
  int x = 5;

  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println(myObj.x);
  }
}

public class Main {
  int x = 5; // Attribute

  public static void main(String[] args) {
    Main myObj1 = new Main();  // Object 1
    Main myObj2 = new Main();  // Object 2
    System.out.println(myObj1.x);
    System.out.println(myObj2.x);
  }
}
 
// multiple classes

// Main.java
public class Main {
  int x = 5;
}

// Second.java
class Second {
  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println(myObj.x);
  }
}

// modify Attribute

public class Main {
  int x; // überschreibbar
  final int y = 10; // nicht überschreibbar

  public static void main(String[] args) {
    Main myObj = new Main();
    myObj.x = 40; // hier
    System.out.println(myObj.x);
  }
}


// public vs static

public class Main {
  // Static method
  static void myStaticMethod() {
    System.out.println("Static methods can be called without creating objects");
  }

  // Public method
  public void myPublicMethod() {
    System.out.println("Public methods must be called by creating objects");
  }

  // Main method
  public static void main(String[] args) {
    myStaticMethod(); // Call the static method
    // myPublicMethod(); This would compile an error

    Main myObj = new Main(); // Create an object of Main
    myObj.myPublicMethod(); // Call the public method on the object
  }
}

// access methods with objects

public class Main {
 
  // fullThrottle() method
  public void fullThrottle() {
    System.out.println("The car is going as fast as it can!");
  }

  // speed() method and add a parameter
  public void speed(int maxSpeed) {
    System.out.println("Max speed is: " + maxSpeed);
  }

  // Inside main, call the methods on the myCar object
  public static void main(String[] args) {
    Main myCar = new Main();   // Create a myCar object
    myCar.fullThrottle();      // Call the fullThrottle() method
    myCar.speed(200);          // Call the speed() method
  }
}

// The car is going as fast as it can!
// Max speed is: 200


// Constructors

public class Main {
  int x;  // class attribute

  // Create a class constructor for the Main class
  public Main() {
    x = 5;  // Set the initial value for the class attribute x
  }

  public static void main(String[] args) {
    Main myObj = new Main(); // Create an object of class Main (This will call the constructor)
    System.out.println(myObj.x); // Print the value of x
  }
}
// Outputs 5

// Constructor parameters

public class Main {
  int x;

  public Main(int y) {
    x = y;
  }

  public static void main(String[] args) {
    Main myObj = new Main(5);
    System.out.println(myObj.x);
  }
}
// Outputs 5


public class Main {
  int modelYear;
  String modelName;

  public Main(int year, String name) {
    modelYear = year;
    modelName = name;
  }

  public static void main(String[] args) {
    Main myCar = new Main(1969, "Mustang");
    System.out.println(myCar.modelYear + " " + myCar.modelName);
  }
}

// Outputs 1969 Mustang


// Modifiers

// Access Modifiers

public	The code is accessible for all classes

private	The code is only accessible within the declared class

default	The code is only accessible in the same package.
This is used when you don't specify a modifier.

protected	The code is accessible in the same package and subclasses.


// non-access Modifiers

final	Attributes and methods cannot be overridden/modified

static	Attributes and methods belongs to the class, rather than an object

abstract	Can only be used in an abstract class, and can only be used on methods. The method does not have a body, for example abstract void run();. The body is provided by the subclass (inherited from). You will learn more about inheritance and abstraction in the Inheritance and Abstraction chapters

transient	Attributes and methods are skipped when serializing the object containing them

synchronized	Methods can only be accessed by one thread at a time

volatile	The value of an attribute is not cached thread-locally, and is always read from the "main memory"


// Code from filename: Main.java
// abstract class
abstract class Main {
  public String fname = "John";
  public int age = 24;
  public abstract void study(); // abstract method
}

// Subclass (inherit from Main)
class Student extends Main {
  public int graduationYear = 2018;
  public void study() { // the body of the abstract method is provided here
    System.out.println("Studying all day long");
  }
}
// End code from filename: Main.java

// Code from filename: Second.java
class Second {
  public static void main(String[] args) {
    // create an object of the Student class (which inherits attributes and methods from Main)
    Student myObj = new Student();

    System.out.println("Name: " + myObj.fname);
    System.out.println("Age: " + myObj.age);
    System.out.println("Graduation Year: " + myObj.graduationYear);
    myObj.study(); // call abstract method
  }
}


// Encapsulation -> hide sensitive data from users

public class Person {
  private String name; // private = restricted access

  // Getter
  public String getName() {
    return name;
  }

  // Setter
  public void setName(String newName) {
    this.name = newName;
  }
}

// built-in packages

import package.name.Class;   // Import a single class
import package.name.*;   // Import the whole package

// get user-input

import java.util.Scanner;

class MyClass {
  public static void main(String[] args) {
    Scanner myObj = new Scanner(System.in);
    System.out.println("Enter username");

    String userName = myObj.nextLine();
    System.out.println("Username is: " + userName);
  }
}

// create own package

package mypack;
class MyPackageClass {
  public static void main(String[] args) {
    System.out.println("This is my package!");
  }
}


// Inheritance -> extend keyword

class Vehicle {
  protected String brand = "Ford";        // Vehicle attribute
  public void honk() {                    // Vehicle method
    System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {
  private String modelName = "Mustang";    // Car attribute
  public static void main(String[] args) {

    // Create a myCar object
    Car myCar = new Car();

    // Call the honk() method (from the Vehicle class) on the myCar object
    myCar.honk();

    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class
    System.out.println(myCar.brand + " " + myCar.modelName);
  }
}


// Polymorphism

class Animal {
  public void animalSound() {
    System.out.println("The animal makes a sound");
  }
}

class Pig extends Animal {
  public void animalSound() {
    System.out.println("The pig says: wee wee");
  }
}

class Dog extends Animal {
  public void animalSound() {
    System.out.println("The dog says: bow wow");
  }
}

class Main {
  public static void main(String[] args) {
    Animal myAnimal = new Animal();  // Create a Animal object
    Animal myPig = new Pig();  // Create a Pig object
    Animal myDog = new Dog();  // Create a Dog object
    myAnimal.animalSound();
    myPig.animalSound();
    myDog.animalSound();
  }
}


// inner classes

class OuterClass {
  int x = 10;

  class InnerClass {
    int y = 5;
  }
}

public class Main {
  public static void main(String[] args) {
    OuterClass myOuter = new OuterClass();
    OuterClass.InnerClass myInner = myOuter.new InnerClass();
    System.out.println(myInner.y + myOuter.x);
  }
}
// Outputs 15 (5 + 10)

// access outer class from inner class
class OuterClass {
  int x = 10;

  class InnerClass {
    public int myInnerMethod() {
      return x;
    }
  }
}

public class Main {
  public static void main(String[] args) {
    OuterClass myOuter = new OuterClass();
    OuterClass.InnerClass myInner = myOuter.new InnerClass();
    System.out.println(myInner.myInnerMethod());
  }
}

// Outputs 10


// abstraction -> process of hiding certain details and showing only essential information to the user

Abstract class: is a restricted class that cannot be used to create objects
(to access it, it must be inherited from another class)

Abstract method: can only be used in an abstract class, and it does not have a body.
The body is provided by the subclass (inherited from)

// Abstract class
abstract class Animal {
  // Abstract method (does not have a body)
  public abstract void animalSound();
  // Regular method
  public void sleep() {
    System.out.println("Zzz");
  }
}

// Subclass (inherit from Animal)
class Pig extends Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig(); // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}

// Interfaces -> a completely "abstract class" that is used to group related methods with empty bodies

// interface
interface Animal {
  public void animalSound(); // interface method (does not have a body)
  public void run(); // interface method (does not have a body)
}

// Pig "implements" the Animal interface
class Pig implements Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
  public void sleep() {
    // The body of sleep() is provided here
    System.out.println("Zzz");
  }
}

// multiple Interfaces

class DemoClass implements FirstInterface, SecondInterface {
  public void myMethod() {
    System.out.println("Some text..");
  }
  public void myOtherMethod() {
    System.out.println("Some other text...");
  }
}


// enums -> special "class" that represents a group of constants (unchangeable variables, like final variables)

// create
enum Level {
  LOW,
  MEDIUM,
  HIGH
}

// access
Level myVar = Level.MEDIUM;

// enum in switch

enum Level {
  LOW,
  MEDIUM,
  HIGH
}

public class Main {
  public static void main(String[] args) {
    Level myVar = Level.MEDIUM;

    switch(myVar) {
      case LOW:
        System.out.println("Low level");
        break;
      case MEDIUM:
         System.out.println("Medium level");
        break;
      case HIGH:
        System.out.println("High level");
        break;
    }
  }
}

// loop through

for (Level myVar : Level.values()) {
  System.out.println(myVar);
}

// User input

import java.util.Scanner;

class Main {
  public static void main(String[] args) {
    Scanner myObj = new Scanner(System.in);

    System.out.println("Enter name, age and salary:");

    // String input
    String name = myObj.nextLine();

    // Numerical input
    int age = myObj.nextInt();
    double salary = myObj.nextDouble();

    // Output input by user
    System.out.println("Name: " + name);
    System.out.println("Age: " + age);
    System.out.println("Salary: " + salary);
  }
}

// time and Date

import java.time.LocalDate; // import the LocalDate class

public class Main {
  public static void main(String[] args) {
    LocalDate myObj = LocalDate.now(); // Create a date object
    System.out.println(myObj); // Display the current date
  }
}
// output 2022-11-01

import java.time.LocalTime; // import the LocalTime class

public class Main {
  public static void main(String[] args) {
    LocalTime myObj = LocalTime.now();
    System.out.println(myObj);
  }
}
// output 11:09:38.319683


// both

import java.time.LocalDateTime; // import the LocalDateTime class

public class Main {
  public static void main(String[] args) {
    LocalDateTime myObj = LocalDateTime.now();
    System.out.println(myObj);
  }
}
// output 2022-11-01T11:09:38.319253

// formatiert

import java.time.LocalDateTime; // Import the LocalDateTime class
import java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class

public class Main {
  public static void main(String[] args) {
    LocalDateTime myDateObj = LocalDateTime.now();
    System.out.println("Before formatting: " + myDateObj);
    DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

    String formattedDate = myDateObj.format(myFormatObj);
    System.out.println("After formatting: " + formattedDate);
  }
}
// output
Before Formatting: 2022-11-01T11:09:38.319319
After Formatting: 01-11-2022 11:09:38


// ArrayList -> class is a resizable array, which can be found in the java.util package
    + elements can be added and removed from an ArrayList

import java.util.ArrayList; // import the ArrayList class

ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object

// add
cars.add("Volvo");

// access
cars.get(0);

// Change
cars.set(0, "Opel");

// remove
cars.remove(0);

// remove all
cars.clear();

// how many elements
cars.size();

// loop through ArrayList
for (int i = 0; i < cars.size(); i++) {
    System.out.println(cars.get(i));
}

// for each
for (String i : cars) {
    System.out.println(i);
}

// sort
Collections.sort(cars);
for (String i : cars) {
    System.out.println(i);
}


// LinkedList -> ArrayList for storing and accessing data, and LinkedList to manipulate data
LinkedList<String> cars = new LinkedList<String>();


// Hash-map -> store items in "key/value" pairs, and you can access them by an index of another type

import java.util.HashMap; // import the HashMap class

HashMap<String, String> capitalCities = new HashMap<String, String>();

// Add keys and values (Country, City)
capitalCities.put("England", "London");

// access
capitalCities.get("England");

// remove
capitalCities.remove("England");

// remove all
capitalCities.clear();

// size
capitalCities.size();

// loop through
for (String i : capitalCities.keySet()) {
    System.out.println(i);
}

// HashSet ->  collection of items where every item is unique, and it is found in the java.util package

// create
import java.util.HashSet; // Import the HashSet class

HashSet<String> cars = new HashSet<String>();

// add
cars.add("...");

// check if exists
cars.contains("...");

// remove
cars.remove("...");

// remove all
cars.clear();

// size
cars.size();

// loop through HashSet
for (String i : cars) {
  System.out.println(i);
}


//iterator -> object that can be used to loop through collections, like ArrayList and HashSet. 
    It is called an "iterator" because "iterating" is the technical term for looping

import java.util.ArrayList;
import java.util.Iterator;

public class Main {
    public static void main(String[] args) {

        // Make a collection
        ArrayList<String> cars = new ArrayList<String>();
        cars.add("Volvo");
        cars.add("BMW");
        cars.add("Ford");
        cars.add("Mazda");

        // Get the iterator
        Iterator<String> it = cars.iterator();

        // Print the first item
        System.out.println(it.next());
    }
}

// loop through
while(it.hasNext()) {
    System.out.println(it.next());
}

// remove
Iterator<Integer> it = numbers.iterator();
    while(it.hasNext()) {
        Integer i = it.next();
        if(i < 10) {
            it.remove();
        }
    }


// wrapper classes -> provide a way to use primitive data types (int, boolean, etc..) as objects

// double -> Double

ArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid

// creating wrapper objects
Integer myInt = 5;
Double myDouble = 5.99;
Character myChar = 'A';

// method on wrapper object
Integer myInt = 100;
String myString = myInt.toString();
// output 3


// exceptions

try {
  //  Block of code to try
}
catch(Exception e) {
  //  Block of code to handle errors
}

public static void main(String[ ] args) {
    try {
      int[] myNumbers = {1, 2, 3};
      System.out.println(myNumbers[10]);
    } catch (Exception e) {
      System.out.println("Something went wrong.");
    }
}

// finally
finally {
    System.out.println("The 'try catch' is finished.");
}

// throw -> custom error,  used together with an exception type

if (age < 18) {
    throw new ArithmeticException("Access denied - You must be at least 18 years old.");
}


// Regular expression -> sequence of characters that forms a search pattern. 
    When you search for data in a text, you can use this search pattern to describe what you are searching for

Pattern Class - Defines a pattern (to be used in a search)
Matcher Class - Used to search for the pattern
PatternSyntaxException Class - Indicates syntax error in a regular expression pattern

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
  public static void main(String[] args) {

    Pattern pattern = Pattern.compile("w3schools", Pattern.CASE_INSENSITIVE);
    Matcher matcher = pattern.matcher("Visit W3Schools!");
    boolean matchFound = matcher.find();
    if(matchFound) {
      System.out.println("Match found");
    } else {
      System.out.println("Match not found");
    }
  }
}

//... noch nicht vollständig


// threads -> allows a program to operate more efficiently by doing multiple things at the same time

// create extend syntax
public class Main extends Thread {
  public void run() {
    System.out.println("This code is running in a thread");
  }
}

// extend example
public class Main extends Thread {
  public static void main(String[] args) {
    Main thread = new Main();
    thread.start();
    System.out.println("This code is outside of the thread");
  }
  public void run() {
    System.out.println("This code is running in a thread");
  }
}


// create implement syntax
public class Main implements Runnable {
  public void run() {
    System.out.println("This code is running in a thread");
  }
}

// implement example
public class Main implements Runnable {
  public static void main(String[] args) {
    Main obj = new Main();
    Thread thread = new Thread(obj);
    thread.start();
    System.out.println("This code is outside of the thread");
  }
  public void run() {
    System.out.println("This code is running in a thread");
  }
}


// Lambda -> short block of code which takes in parameters and returns a value.
    Lambda expressions are similar to methods, but they do not need a name and
    they can be implemented right in the body of a method

parameter -> expression
(parameter1, parameter2) -> expression
(parameter1, parameter2) -> { code block }

// example
import java.util.ArrayList;

public class Main {
  public static void main(String[] args) {
    ArrayList<Integer> numbers = new ArrayList<Integer>();
    numbers.add(5);
    numbers.add(9);
    numbers.add(8);
    numbers.add(1);
    numbers.forEach( (n) -> { System.out.println(n); } );
  }
}